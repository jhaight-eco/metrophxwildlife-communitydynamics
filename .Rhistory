y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
print(str(y[,t,,occ]))
}
# for(t in 1:length(unique(obs.all$year_season))){
for(t in 3:4){
#print(t)
for(occ in 1:3){
#print(occ)
tmp <- obs.all %>% select(site_code, code, survey_year, year_season, survey_date, season, bird_count) %>%
# filter to the specific year/season
filter(year_season == obs.all$year_season[t]) %>% arrange(year_season) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = code, values_from = bird_count)
# there are number of sites that were not surveyed in this particular season. Add these on with all NA
sites.miss <- unique(obs.all$site_code[which(!obs.all$site_code %in% tmp$site_code)])
# add those onto the data
tmp[(nrow(tmp)+1):(nrow(tmp)+length(sites.miss)),]$site_code <- sites.miss
# arrange the data and add it to the array
y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
# print(str(y[,t,,occ]))
print(y[,t,,occ])
}
}
# for(t in 1:length(unique(obs.all$year_season))){
for(t in 1:length(unique(obs.all$year_season))){
#print(t)
for(occ in 1:3){
#print(occ)
tmp <- obs.all %>% select(site_code, code, survey_year, year_season, survey_date, season, bird_count) %>%
# filter to the specific year/season
filter(year_season == obs.all$year_season[t]) %>% arrange(year_season) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = code, values_from = bird_count)
# there are number of sites that were not surveyed in this particular season. Add these on with all NA
sites.miss <- unique(obs.all$site_code[which(!obs.all$site_code %in% tmp$site_code)])
# add those onto the data
tmp[(nrow(tmp)+1):(nrow(tmp)+length(sites.miss)),]$site_code <- sites.miss
# arrange the data and add it to the array
y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
# print(str(y[,t,,occ]))
}
}
# for(t in 1:length(unique(obs.all$year_season))){
Sys.time()
for(t in 1:5){
#print(t)
for(occ in 1:3){
#print(occ)
tmp <- obs.all %>% select(site_code, code, survey_year, year_season, survey_date, season, bird_count) %>%
# filter to the specific year/season
filter(year_season == obs.all$year_season[t]) %>% arrange(year_season) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = code, values_from = bird_count)
# there are number of sites that were not surveyed in this particular season. Add these on with all NA
sites.miss <- unique(obs.all$site_code[which(!obs.all$site_code %in% tmp$site_code)])
# add those onto the data
tmp[(nrow(tmp)+1):(nrow(tmp)+length(sites.miss)),]$site_code <- sites.miss
# arrange the data and add it to the array
y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
# print(str(y[,t,,occ]))
}
}
Sys.time()
# for(t in 1:length(unique(obs.all$year_season))){
Sys.time()
for(t in 1:10){
#print(t)
for(occ in 1:3){
#print(occ)
tmp <- obs.all %>% select(site_code, code, survey_year, year_season, survey_date, season, bird_count) %>%
# filter to the specific year/season
filter(year_season == obs.all$year_season[t]) %>% arrange(year_season) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = code, values_from = bird_count)
# there are number of sites that were not surveyed in this particular season. Add these on with all NA
sites.miss <- unique(obs.all$site_code[which(!obs.all$site_code %in% tmp$site_code)])
# add those onto the data
tmp[(nrow(tmp)+1):(nrow(tmp)+length(sites.miss)),]$site_code <- sites.miss
# arrange the data and add it to the array
y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
# print(str(y[,t,,occ]))
}
}
Sys.time()
length(unique(obs.all$year_season))
57*12/10
# for(t in 1:length(unique(obs.all$year_season))){
Sys.time()
# to run this will take ~1 minute (12 sec for 10)
for(t in 1:length(unique(obs.all$year_season))){
#print(t)
for(occ in 1:3){
#print(occ)
tmp <- obs.all %>% select(site_code, code, survey_year, year_season, survey_date, season, bird_count) %>%
# filter to the specific year/season
filter(year_season == obs.all$year_season[t]) %>% arrange(year_season) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = code, values_from = bird_count)
# there are number of sites that were not surveyed in this particular season. Add these on with all NA
sites.miss <- unique(obs.all$site_code[which(!obs.all$site_code %in% tmp$site_code)])
# add those onto the data
tmp[(nrow(tmp)+1):(nrow(tmp)+length(sites.miss)),]$site_code <- sites.miss
# arrange the data and add it to the array
y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
# print(str(y[,t,,occ]))
}
}
Sys.time()
y[,2,3,]
y[,2,3,]
y[,2,4,]
dimnames(y)[[1]] <- unique(obs.all$site_code)
dimnames(y)[[2]] <- unique(obs.all$year_season)
dimnames(y)[[3]] <- spp$code
dimnames(y)[[4]] <- paste("d", 1:3, sep =)
y[,2,3,]
y[,2,4,]
dimnames(y)[[4]] <- paste("d", 1:3, sep ="")
y[,2,3,]
spp[3]
spp$code[3]
spp$code
spp$code[99]
y[,2,99,]
unique(obs.all$year_season)[2]
unique(obs.all$year_season)
obs.all$year_season[t]
unique(obs.all$year_season)[t]
unique(sort(obs.all$year_season))[t]
sort(obs.all$year_season)
sort(unique(obs.all$year_season)[t])
sort(unique(obs.all$year_season))
sort(unique(obs.all$year_season))[t]
t
t <- 2
sort(unique(obs.all$year_season))[t]
length(unique(obs.all$year_season))
# to run this will take ~1 minute to run for all year/season combinations
for(t in 1:length(unique(obs.all$year_season))){
#print(t)
for(occ in 1:3){
#print(occ)
tmp <- obs.all %>% select(site_code, code, survey_year, year_season, survey_date, season, bird_count) %>%
# filter to the specific year/season, starting with the first when sorted numerically(/alphabetically)
filter(year_season == sort(unique(obs.all$year_season))[t]) %>% arrange(year_season) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = code, values_from = bird_count)
# there are number of sites that were not surveyed in this particular season. Add these on with all NA
sites.miss <- unique(obs.all$site_code[which(!obs.all$site_code %in% tmp$site_code)])
# add those onto the data
tmp[(nrow(tmp)+1):(nrow(tmp)+length(sites.miss)),]$site_code <- sites.miss
# arrange the data and add it to the array
y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
# print(str(y[,t,,occ]))
}
}
# # sites X # species X # time points (survey season, in order) x survey days
# OR
# number of sites times two (for each season) X # species X # years X survey days
# unique combinations of survey year and season
y <- array(dim = c(n.site, length(unique(obs.all$year_season)), n.spp, 3))
# # sites X # species X # time points (survey season, in order) x survey days
# OR
# number of sites times two (for each season) X # species X # years X survey days
# unique combinations of survey year and season
y <- array(dim = c(n.site, length(unique(obs.all$year_season)), n.spp, 3))
str(y)
str(y[,2,,])
t <- 2
occ <- 3
str(y[,t,,occ])
str(y)
t <- 2
occ <- 3
str(y[,t,,occ])
# for(t in 1:length(unique(obs.all$year_season))){
Sys.time()
# to run this will take ~1 minute to run for all year/season combinations
for(t in 1:length(unique(obs.all$year_season))){
#print(t)
for(occ in 1:3){
#print(occ)
tmp <- obs.all %>% select(site_code, code, survey_year, year_season, survey_date, season, bird_count) %>%
# filter to the specific year/season, starting with the first when sorted numerically(/alphabetically)
filter(year_season == sort(unique(obs.all$year_season))[t]) %>% arrange(year_season) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = code, values_from = bird_count)
# there are number of sites that were not surveyed in this particular season. Add these on with all NA
sites.miss <- unique(obs.all$site_code[which(!obs.all$site_code %in% tmp$site_code)])
# add those onto the data
tmp[(nrow(tmp)+1):(nrow(tmp)+length(sites.miss)),]$site_code <- sites.miss
# arrange the data and add it to the array
y[,t,,occ] <-  tmp %>% arrange(site_code) %>% ungroup() %>% select(-site_code) %>% as.matrix()
# print(str(y[,t,,occ]))
}
}
Sys.time()
dimnames(y)[[1]] <- unique(obs.all$site_code)
dimnames(y)[[2]] <- sort(unique(obs.all$year_season))
dimnames(y)[[3]] <- spp$code
dimnames(y)[[4]] <- paste("d", 1:3, sep ="")
# to verify that everything worked examine a season's abundances for a single species
y[,2,99,]   # sp
# to verify that everything worked examine a season's abundances for a single species
y[,2,99,]   # spp 99 = HOSP (house sparrow)
dimnames(y)[[4]] <- paste("occ", 1:3, sep ="")
# to verify that everything worked examine a season's abundances for a single species
y[,2,99,]   # spp 99 = HOSP (house sparrow)
y[,,99,1]   # spp 99 = HOSP (house sparrow)
# to verify that everything worked examine a season's abundances for a single species
data.frame(y[,3,99,])   # spp 99 = HOSP (house sparrow) ; t 3 = 2001_1_winter
obs.all %>% filter(code == "HOSP") %>% filter(year_season == "2001_1_winter")
# add names to the array dimensions
# these should have all been ordered in the loop above
dimnames(y)[[1]] <- sort(unique(obs.all$site_code))
dimnames(y)[[2]] <- sort(unique(obs.all$year_season))
dimnames(y)[[3]] <- sort(spp$code)
dimnames(y)[[4]] <- paste("occ", 1:3, sep ="")
# to verify that everything worked examine a season's abundances for a single species
data.frame(y[,3,99,])    # spp 99 = HOSP (house sparrow) ; t 3 = 2001_1_winter
obs.all %>% filter(code == "HOSP") %>% filter(year_season == "2001_1_winter")
# to verify that everything worked examine a season's abundances for a single species
data.frame(y[,3,99,])    # spp 99 = HOSP (house sparrow) ; t 3 = 2001_1_winter
obs.all %>% filter(code == "HOSP") %>% filter(year_season == "2001_1_winter") %>% arrange(site_code)
# number of survey days per site, per season
(n.survey <- obs.all %>%
group_by(site_code, survey_year, season, code) %>%
filter(code == "ABTO") %>% summarize(n_survey = length(season)) %>% select(-code))
sort(unique(obs.all$year_season))
sort(unique(obs.all$site_code))[52]
sort(unique(obs.all$year_season))[52]
# to verify that everything worked examine a season's abundances for a single species
data.frame(y[,52,99,])    # spp 99 = HOSP (house sparrow) ; t 52 = 2020_2_spring
# to verify that everything worked examine a season's abundances for a single species
data.frame(y[,52,99,])    # spp 99 = HOSP (house sparrow) ; t 52 = 2020_2_spring
obs.all %>% filter(code == "HOSP") %>% filter(year_season == "2020_2_spring") %>% arrange(site_code)
# to verify that everything worked examine a season's abundances for a single species
data.frame(y[,52,99,])    # spp 99 = HOSP (house sparrow) ; t 52 = 2020_2_spring
obs.all %>% filter(code == "HOSP") %>% filter(year_season == "2020_2_spring") %>% arrange(site_code)
which(sort(unique(obs.all$year_season)) == "2020_2_spring")
which(spp$code == "HOSP")
dimnames(y)[[2]]
which(dimnames(y)[[3]] == "HOSP")
y[,which(dimnames(y)[[3]] == "HOSP"), which(dimnames(y)[[2]] == "2020_2_spring"), ]
which(dimnames(y)[[3]] == "HOSP")
y[, which(dimnames(y)[[2]] == "2020_2_spring"),which(dimnames(y)[[3]] == "HOSP"), ]
y[, which(dimnames(y)[[2]] == "2020_2_spring"),which(dimnames(y)[[3]] == "HOSP"), ]    # spp 99 = HOSP (house sparrow) ; t 52 = 2020_2_spring
obs.all %>% filter(code == "HOSP") %>% filter(year_season == "2020_2_spring") %>% arrange(site_code)
obs.all %>% filter(location_type %in% c("ESCA", "riparian"))
obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)
?pull
obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)  %>% select(site_code, year_season)
obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)  %>% pull(site_code)
obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)  %>%
pull(site_code) %>% unique
to.keep.sites <- obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)  %>%
pull(site_code) %>% unique()
to.keep.sites <- obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)  %>%
pull(site_code) %>% unique()
to.keep.sites <- obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)  %>%
pull(site_code) %>% unique()
to.keep.seasons <- obs.all %>%
filter(season %in% c("1_winter", "2_spring")) %>%
filter(location_type %in% c("ESCA", "riparian")) %>%
filter(survey_year <= 2016 & survey_year >= 2001)  %>%
pull(year_season) %>% unique()
to.keep.sites
to.keep.seasons
y[, which(dimnames(y)[[2]] %in% to.keep.seasons),which(dimnames(y)[[3]] == "HOSP"), ]
y[which(dimnames(y)[[1]] %in% to.keep.sites), which(dimnames(y)[[2]] %in% to.keep.seasons),which(dimnames(y)[[3]] == "HOSP"), ]
y[which(dimnames(y)[[1]] %in% to.keep.sites), which(dimnames(y)[[2]] %in% to.keep.seasons),which(dimnames(y)[[3]] == "HOSP"), 1]
str(
y[which(dimnames(y)[[1]] %in% to.keep.sites), which(dimnames(y)[[2]] %in% to.keep.seasons),which(dimnames(y)[[3]] == "HOSP"),]
)
str(y)
counts <- y
y.count <- counts
rm(counts)
str(y.count[,t,,occ])
str(
y.count[which(dimnames(y.count)[[1]] %in% to.keep.sites),
which(dimnames(y.count)[[2]] %in% to.keep.seasons),
which(dimnames(y.count)[[3]] == "HOSP"),
]
)
# binary detections or note
y <- y.count
y[y > 1] <- 1
y[,
which(dimnames(y)[[2]] == "2020_2_spring"),
which(dimnames(y)[[3]] == "HOSP"),
]
str(n.surveys)
str(n.survey)
n.survey
# number of survey days per site, per season
(n.survey <- obs.all %>%
group_by(site_code, survey_year, season, year_season, code) %>%
filter(code == "ABTO") %>% summarize(n_survey = length(season)) %>% select(-code))
length(unique(n.survey$year_season))
3219/57
# we also need an array of surveys by site/season
t <- 2
n.survey %>% filter(year_season == sort(unique(obs.all$year_season))[t])
n.survey %>% filter(year_season == sort(unique(n.survey$year_season))[t])
tmp <- n.survey %>% filter(year_season == sort(unique(n.survey$year_season))[t]) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
#summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = year_season, values_from = bird_count)
tmp <- n.survey %>% filter(year_season == sort(unique(n.survey$year_season))[t]) %>% group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
#summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = year_season, values_from = n.survey)
tmp <- n.survey %>% filter(year_season == sort(unique(n.survey$year_season))[t]) #%>% group_by(site_code, code) %>%
tmp <- n.survey %>% filter(year_season == sort(unique(n.survey$year_season))[t]) %>% #group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
#summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = year_season, values_from = n_survey)
tmp
tmp <- n.survey %>% filter(year_season == sort(unique(n.survey$year_season))[t]) %>% #group_by(site_code, code) %>%
# select the bird count from the specific occasion (and use the .groups argument to get rid of the 'summarise()' message)
#summarize(bird_count = bird_count[occ], .groups = 'drop') %>% arrange(site_code, code) %>%  # select the bird count from the specific occasion
pivot_wider(names_from = site_code, values_from = n_survey)
tmp
str(y)
str(y[,,1,])
is.na(y[,,1,])
y[is.na(y[,,1,])== FALSE]
k <- y
k <- y[,,1,]
k[is.na(k)== FALSE]
k
k[is.na(k)== FALSE] <- 1
k
?apply
apply(k, MARGIN = 1, fun = sum(na.rm = TRUE))
apply(k, MARGIN = 1, FUN = sum(na.rm = TRUE))
apply(k, MARGIN = 1, FUN = 'sum')
apply(k, MARGIN = 1, FUN = 'sum', na.rm = TRUE)
apply(k, MARGIN = c(1,2,3), FUN = 'sum', na.rm = TRUE)
str(k)
apply(k, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE)
k1 <- k
k <- apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE)
str(k)
?pivot_longer
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
k
colnames(k) <- sort(n.survey$year_season)
length(colnames(k))
length(unique(sort(n.survey$year_season)))
colnames(k) <- sort(unique(n.survey$year_season))
colnames
k
rownames(k)
k$site_code <- rownames(k)
k %>% pivot_longer(!site_code, names_to = year_season)
k %>% pivot_longer(!site_code, names_to = "year_season")
k <- k %>% pivot_longer(!site_code, names_to = "year_season")
k
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey")
k
str(n.survey)
left_join(k, n.survey)
right_join(k, n.survey)
full_join(k, n.survey)
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>% left_join(n.survey)
k
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
left_join(n.survey) %>%
arrange(year_season, sites_code)
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
left_join(n.survey) %>%
arrange(year_season, site_code)
k
str(n.survey)
nrow(n.survey)
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
full_join(n.survey) %>%
arrange(year_season, site_code)
k
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
full_join(n.survey, by = c(site_code, year_season)) %>%
arrange(year_season, site_code)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
full_join(n.survey, by = c("site_code", "year_season")) %>%
arrange(year_season, site_code)
surveys
str(surveys)
length(survey_year)
length(surveys$survey_year)
length(unique(surveys$survey_year))
length(unique(surveys$survey_year))
24*57
k$site_code <- rownames(k)
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
full_join(n.survey) %>%
arrange(year_season, site_code)
k
24*105
paste(unique(surveys$survey_year), unique(surveys$season))
paste(unique(surveys$survey_year), unique(surveys$season), sep = "_")
length(paste(unique(surveys$survey_year), unique(surveys$season)))
unique(surveys$survey_year
)
length(rep(unique(surveys$survey_year), length(unique(surveys$site_code))))
ep(unique(surveys$survey_year), length(unique(surveys$site_code)))
rep(unique(surveys$survey_year), length(unique(surveys$site_code)))
length(rep(unique(surveys$survey_year), length(unique(surveys$season))))
length(rep(unique(surveys$season), each = length(unique(surveys$survey_year))))
length(unique(obs.all$year_season))
unique(obs.all$year_season)
57*105
k
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
full_join(n.survey) %>%
arrange(year_season, site_code)
k
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
left_join(n.survey) %>%
arrange(year_season, site_code)
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
left_join(n.survey) %>%
arrange(year_season, site_code)
k
rep(sort(unique(obs.all$year_season)), each = 2)
rep(sort(unique(obs.all$year_season)), 2)
k <- data.frame(apply(k1, MARGIN = c(1,2), FUN = 'sum', na.rm = TRUE))
colnames(k) <- sort(unique(n.survey$year_season))
k$site_code <- rownames(k)
k <- k %>% pivot_longer(!site_code, names_to = "year_season", values_to = "n_survey") %>%
left_join(n.survey) %>%
arrange(site_code, year_season)
k
substr(k$year_season, 1, 4)
k$survey_year <- substr(k$year_season, 1, 4)
k
substr(k$year_season, start = 6)
substr(k$year_season, start = 6, end = 10)
?substr
substr(k$year_season, start = 6, end = nchar(K$year_season))
nchar(K$year_season)
k %>% summarize(substr(year_season, start = 6, end = nchar(year_season))
k %>% summarize(substr(year_season, start = 6, end = nchar(year_season)))
nchar(k$year_season)
for(i in 1:nrow(k)){
print(i)
}
k$survey_year[3]
nchar(k$year_season[3]
)
substr(k$year_season[t], start = 6, end = nchar(k$year_season[t]))
t
k$year_season[t]
nchar(k$year_season[t])
substr(k$year_season[t], start = 6, end = nchar(k$year_season[t]))
substr(k$year_season[t], start = 6, stop = nchar(k$year_season[t]))
substr(k$year_season, start = 6, stop = nchar(k$year_season))
k$season <- substr(k$year_season, start = 6, stop = nchar(k$year_season))
k
